from concurrent import futures
import grpc
import redis
import mysql.connector
import logging

import wine_pb2
import wine_pb2_grpc

logging.basicConfig(level=logging.INFO)

# Configuración de los servidores Redis
redis_servers = [
    {'host': 'localhost', 'port': 7010},  # Master
    {'host': 'localhost', 'port': 7011},  # Replica 1
    {'host': 'localhost', 'port': 7012}   # Replica 2
]

def connect_to_redis(servers):
    for server in servers:
        try:
            r = redis.Redis(host=server['host'], port=server['port'], db=0)
            r.ping()  # Intenta obtener una respuesta del servidor
            logging.info(f"Conectado a Redis en {server['host']}:{server['port']}")
            return r
        except redis.RedisError as e:
            logging.error(f"Error al conectar con Redis en {server['host']}:{server['port']}: {e}")
    raise Exception("No se pudo conectar a ningún servidor Redis")

# Intentar conectar a Redis
try:
    r = connect_to_redis(redis_servers)
except Exception as e:
    logging.error(f"Error al conectar con Redis: {e}")

# Intentar conectar con MySQL
try:
    mydb = mysql.connector.connect(
      host="localhost",
      user="root",
      password="Fofolito2020.",
      database="mydatabase"
    )
    cursor = mydb.cursor()
except mysql.connector.Error as e:
    logging.error(f"Error al conectar con MySQL: {e}")

class WineTasterService(wine_pb2_grpc.WineTasterServicer):
    def GetTasterInfo(self, request, context):
        try:
            taster_name = r.get(request.id)
            if taster_name:
                logging.info(f"Respondido desde el caché de Redis para el ID: {request.id}")
                return wine_pb2.TasterResponse(tasterName=taster_name.decode('utf-8'), fromCache=True)
        except redis.RedisError as e:
            logging.error(f"Error al recuperar datos de Redis: {e}")
        
        try:
            cursor.execute("SELECT taster_name FROM wine_tasters WHERE id = %s", (request.id,))
            result = cursor.fetchone()
            if result is None:
                response = "ID no existe"
            elif result[0]:
                taster_name = result[0]
                r.set(request.id, taster_name)
                r.expire(request.id, 3600)
            else:
                taster_name = "Taster no identificado"
            return wine_pb2.TasterResponse(tasterName=taster_name if result else response, fromCache=False)
        except mysql.connector.Error as e:
            logging.error(f"Error al acceder a MySQL: {e}")
            return wine_pb2.TasterResponse(tasterName="Error de base de datos", fromCache=False)

def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    wine_pb2_grpc.add_WineTasterServicer_to_server(WineTasterService(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    server.wait_for_termination()

if __name__ == '__main__':
    serve()
